/* 
 * OpenHack
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LeaderboardModel
    /// </summary>
    [DataContract]
    public partial class LeaderboardModel :  IEquatable<LeaderboardModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardModel" /> class.
        /// </summary>
        /// <param name="Id">Object ID from AAD for the user or group.</param>
        /// <param name="Name">Name of Team or Given name and Surname of user.</param>
        /// <param name="Score">Current score in the Trivia contest.</param>
        /// <param name="AchievementBadge">AchievementBadge.</param>
        /// <param name="AchievementBadgeIcon">AchievementBadgeIcon.</param>
        public LeaderboardModel(Guid? Id = default(Guid?), string Name = default(string), int? Score = default(int?), string AchievementBadge = default(string), string AchievementBadgeIcon = default(string))
        {
            this.Id = Id;
            this.Name = Name;
            this.Score = Score;
            this.AchievementBadge = AchievementBadge;
            this.AchievementBadgeIcon = AchievementBadgeIcon;
        }
        
        /// <summary>
        /// Object ID from AAD for the user or group
        /// </summary>
        /// <value>Object ID from AAD for the user or group</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Name of Team or Given name and Surname of user
        /// </summary>
        /// <value>Name of Team or Given name and Surname of user</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Current score in the Trivia contest
        /// </summary>
        /// <value>Current score in the Trivia contest</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public int? Score { get; set; }

        /// <summary>
        /// Gets or Sets AchievementBadge
        /// </summary>
        [DataMember(Name="achievementBadge", EmitDefaultValue=false)]
        public string AchievementBadge { get; set; }

        /// <summary>
        /// Gets or Sets AchievementBadgeIcon
        /// </summary>
        [DataMember(Name="achievementBadgeIcon", EmitDefaultValue=false)]
        public string AchievementBadgeIcon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaderboardModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  AchievementBadge: ").Append(AchievementBadge).Append("\n");
            sb.Append("  AchievementBadgeIcon: ").Append(AchievementBadgeIcon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaderboardModel);
        }

        /// <summary>
        /// Returns true if LeaderboardModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaderboardModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaderboardModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.AchievementBadge == input.AchievementBadge ||
                    (this.AchievementBadge != null &&
                    this.AchievementBadge.Equals(input.AchievementBadge))
                ) && 
                (
                    this.AchievementBadgeIcon == input.AchievementBadgeIcon ||
                    (this.AchievementBadgeIcon != null &&
                    this.AchievementBadgeIcon.Equals(input.AchievementBadgeIcon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.AchievementBadge != null)
                    hashCode = hashCode * 59 + this.AchievementBadge.GetHashCode();
                if (this.AchievementBadgeIcon != null)
                    hashCode = hashCode * 59 + this.AchievementBadgeIcon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
