/* 
 * OpenHack
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Result of answer to trivia question
    /// </summary>
    [DataContract]
    public partial class AnswerResponseModel :  IEquatable<AnswerResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnswerResponseModel" /> class.
        /// </summary>
        /// <param name="Correct">Answer is correct.</param>
        /// <param name="AchievementBadge">Achievement Badge earned for user.</param>
        /// <param name="AchievementBadgeIcon">AchievementBadgeIcon.</param>
        public AnswerResponseModel(bool? Correct = default(bool?), string AchievementBadge = default(string), string AchievementBadgeIcon = default(string))
        {
            this.Correct = Correct;
            this.AchievementBadge = AchievementBadge;
            this.AchievementBadgeIcon = AchievementBadgeIcon;
        }
        
        /// <summary>
        /// Answer is correct
        /// </summary>
        /// <value>Answer is correct</value>
        [DataMember(Name="correct", EmitDefaultValue=false)]
        public bool? Correct { get; set; }

        /// <summary>
        /// Achievement Badge earned for user
        /// </summary>
        /// <value>Achievement Badge earned for user</value>
        [DataMember(Name="achievementBadge", EmitDefaultValue=false)]
        public string AchievementBadge { get; set; }

        /// <summary>
        /// Gets or Sets AchievementBadgeIcon
        /// </summary>
        [DataMember(Name="achievementBadgeIcon", EmitDefaultValue=false)]
        public string AchievementBadgeIcon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnswerResponseModel {\n");
            sb.Append("  Correct: ").Append(Correct).Append("\n");
            sb.Append("  AchievementBadge: ").Append(AchievementBadge).Append("\n");
            sb.Append("  AchievementBadgeIcon: ").Append(AchievementBadgeIcon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnswerResponseModel);
        }

        /// <summary>
        /// Returns true if AnswerResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AnswerResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnswerResponseModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Correct == input.Correct ||
                    (this.Correct != null &&
                    this.Correct.Equals(input.Correct))
                ) && 
                (
                    this.AchievementBadge == input.AchievementBadge ||
                    (this.AchievementBadge != null &&
                    this.AchievementBadge.Equals(input.AchievementBadge))
                ) && 
                (
                    this.AchievementBadgeIcon == input.AchievementBadgeIcon ||
                    (this.AchievementBadgeIcon != null &&
                    this.AchievementBadgeIcon.Equals(input.AchievementBadgeIcon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Correct != null)
                    hashCode = hashCode * 59 + this.Correct.GetHashCode();
                if (this.AchievementBadge != null)
                    hashCode = hashCode * 59 + this.AchievementBadge.GetHashCode();
                if (this.AchievementBadgeIcon != null)
                    hashCode = hashCode * 59 + this.AchievementBadgeIcon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
