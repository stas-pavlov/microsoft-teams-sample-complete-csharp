/* 
 * OpenHack
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITriviaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Trivia Leaderboard
        /// </summary>
        /// <remarks>
        /// Get the Team or User Leaderboard for the Trivia Contest
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Tab context (from microsoftTeams.getContext() method)</param>
        /// <param name="type">Type of Leaderboard request (&#39;team&#39; or &#39;user&#39;)</param>
        /// <returns>List&lt;LeaderboardModel&gt;</returns>
        List<LeaderboardModel> TriviaGetLeaderboard (TeamsContextModel context, string type);

        /// <summary>
        /// Get Trivia Leaderboard
        /// </summary>
        /// <remarks>
        /// Get the Team or User Leaderboard for the Trivia Contest
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Tab context (from microsoftTeams.getContext() method)</param>
        /// <param name="type">Type of Leaderboard request (&#39;team&#39; or &#39;user&#39;)</param>
        /// <returns>ApiResponse of List&lt;LeaderboardModel&gt;</returns>
        ApiResponse<List<LeaderboardModel>> TriviaGetLeaderboardWithHttpInfo (TeamsContextModel context, string type);
        /// <summary>
        /// Get Trivia Question
        /// </summary>
        /// <remarks>
        /// Get a trivia question for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Azure AD identifier for user</param>
        /// <returns>QuestionModel</returns>
        QuestionModel TriviaGetQuestion (QuestionRequesterModel user);

        /// <summary>
        /// Get Trivia Question
        /// </summary>
        /// <remarks>
        /// Get a trivia question for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Azure AD identifier for user</param>
        /// <returns>ApiResponse of QuestionModel</returns>
        ApiResponse<QuestionModel> TriviaGetQuestionWithHttpInfo (QuestionRequesterModel user);
        /// <summary>
        /// Register Team
        /// </summary>
        /// <remarks>
        /// Register Team and its members in the Trivia contest
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roster">Team members participating in the Trivia contest</param>
        /// <returns>TeamRosterResponseModel</returns>
        TeamRosterResponseModel TriviaRegisterTeam (TeamRosterModel roster);

        /// <summary>
        /// Register Team
        /// </summary>
        /// <remarks>
        /// Register Team and its members in the Trivia contest
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roster">Team members participating in the Trivia contest</param>
        /// <returns>ApiResponse of TeamRosterResponseModel</returns>
        ApiResponse<TeamRosterResponseModel> TriviaRegisterTeamWithHttpInfo (TeamRosterModel roster);
        /// <summary>
        /// Search Trivia contest participants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="k">Keyword to find in Name property</param>
        /// <returns>List&lt;LeaderboardModel&gt;</returns>
        List<LeaderboardModel> TriviaSearch (string k);

        /// <summary>
        /// Search Trivia contest participants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="k">Keyword to find in Name property</param>
        /// <returns>ApiResponse of List&lt;LeaderboardModel&gt;</returns>
        ApiResponse<List<LeaderboardModel>> TriviaSearchWithHttpInfo (string k);
        /// <summary>
        /// Submit Answer
        /// </summary>
        /// <remarks>
        /// Submit answer to trivia question
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">Trivia answer and supporting data</param>
        /// <returns>AnswerResponseModel</returns>
        AnswerResponseModel TriviaSubmitAnswer (AnswerModel answer);

        /// <summary>
        /// Submit Answer
        /// </summary>
        /// <remarks>
        /// Submit answer to trivia question
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">Trivia answer and supporting data</param>
        /// <returns>ApiResponse of AnswerResponseModel</returns>
        ApiResponse<AnswerResponseModel> TriviaSubmitAnswerWithHttpInfo (AnswerModel answer);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Trivia Leaderboard
        /// </summary>
        /// <remarks>
        /// Get the Team or User Leaderboard for the Trivia Contest
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Tab context (from microsoftTeams.getContext() method)</param>
        /// <param name="type">Type of Leaderboard request (&#39;team&#39; or &#39;user&#39;)</param>
        /// <returns>Task of List&lt;LeaderboardModel&gt;</returns>
        System.Threading.Tasks.Task<List<LeaderboardModel>> TriviaGetLeaderboardAsync (TeamsContextModel context, string type);

        /// <summary>
        /// Get Trivia Leaderboard
        /// </summary>
        /// <remarks>
        /// Get the Team or User Leaderboard for the Trivia Contest
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Tab context (from microsoftTeams.getContext() method)</param>
        /// <param name="type">Type of Leaderboard request (&#39;team&#39; or &#39;user&#39;)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderboardModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LeaderboardModel>>> TriviaGetLeaderboardAsyncWithHttpInfo (TeamsContextModel context, string type);
        /// <summary>
        /// Get Trivia Question
        /// </summary>
        /// <remarks>
        /// Get a trivia question for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Azure AD identifier for user</param>
        /// <returns>Task of QuestionModel</returns>
        System.Threading.Tasks.Task<QuestionModel> TriviaGetQuestionAsync (QuestionRequesterModel user);

        /// <summary>
        /// Get Trivia Question
        /// </summary>
        /// <remarks>
        /// Get a trivia question for the specified user
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Azure AD identifier for user</param>
        /// <returns>Task of ApiResponse (QuestionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionModel>> TriviaGetQuestionAsyncWithHttpInfo (QuestionRequesterModel user);
        /// <summary>
        /// Register Team
        /// </summary>
        /// <remarks>
        /// Register Team and its members in the Trivia contest
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roster">Team members participating in the Trivia contest</param>
        /// <returns>Task of TeamRosterResponseModel</returns>
        System.Threading.Tasks.Task<TeamRosterResponseModel> TriviaRegisterTeamAsync (TeamRosterModel roster);

        /// <summary>
        /// Register Team
        /// </summary>
        /// <remarks>
        /// Register Team and its members in the Trivia contest
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roster">Team members participating in the Trivia contest</param>
        /// <returns>Task of ApiResponse (TeamRosterResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamRosterResponseModel>> TriviaRegisterTeamAsyncWithHttpInfo (TeamRosterModel roster);
        /// <summary>
        /// Search Trivia contest participants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="k">Keyword to find in Name property</param>
        /// <returns>Task of List&lt;LeaderboardModel&gt;</returns>
        System.Threading.Tasks.Task<List<LeaderboardModel>> TriviaSearchAsync (string k);

        /// <summary>
        /// Search Trivia contest participants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="k">Keyword to find in Name property</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderboardModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LeaderboardModel>>> TriviaSearchAsyncWithHttpInfo (string k);
        /// <summary>
        /// Submit Answer
        /// </summary>
        /// <remarks>
        /// Submit answer to trivia question
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">Trivia answer and supporting data</param>
        /// <returns>Task of AnswerResponseModel</returns>
        System.Threading.Tasks.Task<AnswerResponseModel> TriviaSubmitAnswerAsync (AnswerModel answer);

        /// <summary>
        /// Submit Answer
        /// </summary>
        /// <remarks>
        /// Submit answer to trivia question
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">Trivia answer and supporting data</param>
        /// <returns>Task of ApiResponse (AnswerResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnswerResponseModel>> TriviaSubmitAnswerAsyncWithHttpInfo (AnswerModel answer);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TriviaApi : ITriviaApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TriviaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TriviaApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TriviaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TriviaApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Trivia Leaderboard Get the Team or User Leaderboard for the Trivia Contest
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Tab context (from microsoftTeams.getContext() method)</param>
        /// <param name="type">Type of Leaderboard request (&#39;team&#39; or &#39;user&#39;)</param>
        /// <returns>List&lt;LeaderboardModel&gt;</returns>
        public List<LeaderboardModel> TriviaGetLeaderboard (TeamsContextModel context, string type)
        {
             ApiResponse<List<LeaderboardModel>> localVarResponse = TriviaGetLeaderboardWithHttpInfo(context, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trivia Leaderboard Get the Team or User Leaderboard for the Trivia Contest
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Tab context (from microsoftTeams.getContext() method)</param>
        /// <param name="type">Type of Leaderboard request (&#39;team&#39; or &#39;user&#39;)</param>
        /// <returns>ApiResponse of List&lt;LeaderboardModel&gt;</returns>
        public ApiResponse< List<LeaderboardModel> > TriviaGetLeaderboardWithHttpInfo (TeamsContextModel context, string type)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling TriviaApi->TriviaGetLeaderboard");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TriviaApi->TriviaGetLeaderboard");

            var localVarPath = "/api/trivia/leaderboard/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (context != null && context.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(context); // http body (model) parameter
            }
            else
            {
                localVarPostBody = context; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriviaGetLeaderboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderboardModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LeaderboardModel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderboardModel>)));
        }

        /// <summary>
        /// Get Trivia Leaderboard Get the Team or User Leaderboard for the Trivia Contest
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Tab context (from microsoftTeams.getContext() method)</param>
        /// <param name="type">Type of Leaderboard request (&#39;team&#39; or &#39;user&#39;)</param>
        /// <returns>Task of List&lt;LeaderboardModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LeaderboardModel>> TriviaGetLeaderboardAsync (TeamsContextModel context, string type)
        {
             ApiResponse<List<LeaderboardModel>> localVarResponse = await TriviaGetLeaderboardAsyncWithHttpInfo(context, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Trivia Leaderboard Get the Team or User Leaderboard for the Trivia Contest
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Tab context (from microsoftTeams.getContext() method)</param>
        /// <param name="type">Type of Leaderboard request (&#39;team&#39; or &#39;user&#39;)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderboardModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LeaderboardModel>>> TriviaGetLeaderboardAsyncWithHttpInfo (TeamsContextModel context, string type)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling TriviaApi->TriviaGetLeaderboard");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TriviaApi->TriviaGetLeaderboard");

            var localVarPath = "/api/trivia/leaderboard/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (context != null && context.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(context); // http body (model) parameter
            }
            else
            {
                localVarPostBody = context; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriviaGetLeaderboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderboardModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LeaderboardModel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderboardModel>)));
        }

        /// <summary>
        /// Get Trivia Question Get a trivia question for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Azure AD identifier for user</param>
        /// <returns>QuestionModel</returns>
        public QuestionModel TriviaGetQuestion (QuestionRequesterModel user)
        {
             ApiResponse<QuestionModel> localVarResponse = TriviaGetQuestionWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trivia Question Get a trivia question for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Azure AD identifier for user</param>
        /// <returns>ApiResponse of QuestionModel</returns>
        public ApiResponse< QuestionModel > TriviaGetQuestionWithHttpInfo (QuestionRequesterModel user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling TriviaApi->TriviaGetQuestion");

            var localVarPath = "/api/trivia/question";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriviaGetQuestion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionModel)));
        }

        /// <summary>
        /// Get Trivia Question Get a trivia question for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Azure AD identifier for user</param>
        /// <returns>Task of QuestionModel</returns>
        public async System.Threading.Tasks.Task<QuestionModel> TriviaGetQuestionAsync (QuestionRequesterModel user)
        {
             ApiResponse<QuestionModel> localVarResponse = await TriviaGetQuestionAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Trivia Question Get a trivia question for the specified user
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Azure AD identifier for user</param>
        /// <returns>Task of ApiResponse (QuestionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionModel>> TriviaGetQuestionAsyncWithHttpInfo (QuestionRequesterModel user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling TriviaApi->TriviaGetQuestion");

            var localVarPath = "/api/trivia/question";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriviaGetQuestion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionModel)));
        }

        /// <summary>
        /// Register Team Register Team and its members in the Trivia contest
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roster">Team members participating in the Trivia contest</param>
        /// <returns>TeamRosterResponseModel</returns>
        public TeamRosterResponseModel TriviaRegisterTeam (TeamRosterModel roster)
        {
             ApiResponse<TeamRosterResponseModel> localVarResponse = TriviaRegisterTeamWithHttpInfo(roster);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register Team Register Team and its members in the Trivia contest
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roster">Team members participating in the Trivia contest</param>
        /// <returns>ApiResponse of TeamRosterResponseModel</returns>
        public ApiResponse< TeamRosterResponseModel > TriviaRegisterTeamWithHttpInfo (TeamRosterModel roster)
        {
            // verify the required parameter 'roster' is set
            if (roster == null)
                throw new ApiException(400, "Missing required parameter 'roster' when calling TriviaApi->TriviaRegisterTeam");

            var localVarPath = "/api/trivia/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roster != null && roster.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roster); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roster; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriviaRegisterTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamRosterResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamRosterResponseModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamRosterResponseModel)));
        }

        /// <summary>
        /// Register Team Register Team and its members in the Trivia contest
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roster">Team members participating in the Trivia contest</param>
        /// <returns>Task of TeamRosterResponseModel</returns>
        public async System.Threading.Tasks.Task<TeamRosterResponseModel> TriviaRegisterTeamAsync (TeamRosterModel roster)
        {
             ApiResponse<TeamRosterResponseModel> localVarResponse = await TriviaRegisterTeamAsyncWithHttpInfo(roster);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register Team Register Team and its members in the Trivia contest
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roster">Team members participating in the Trivia contest</param>
        /// <returns>Task of ApiResponse (TeamRosterResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamRosterResponseModel>> TriviaRegisterTeamAsyncWithHttpInfo (TeamRosterModel roster)
        {
            // verify the required parameter 'roster' is set
            if (roster == null)
                throw new ApiException(400, "Missing required parameter 'roster' when calling TriviaApi->TriviaRegisterTeam");

            var localVarPath = "/api/trivia/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roster != null && roster.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roster); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roster; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriviaRegisterTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamRosterResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamRosterResponseModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamRosterResponseModel)));
        }

        /// <summary>
        /// Search Trivia contest participants 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="k">Keyword to find in Name property</param>
        /// <returns>List&lt;LeaderboardModel&gt;</returns>
        public List<LeaderboardModel> TriviaSearch (string k)
        {
             ApiResponse<List<LeaderboardModel>> localVarResponse = TriviaSearchWithHttpInfo(k);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Trivia contest participants 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="k">Keyword to find in Name property</param>
        /// <returns>ApiResponse of List&lt;LeaderboardModel&gt;</returns>
        public ApiResponse< List<LeaderboardModel> > TriviaSearchWithHttpInfo (string k)
        {
            // verify the required parameter 'k' is set
            if (k == null)
                throw new ApiException(400, "Missing required parameter 'k' when calling TriviaApi->TriviaSearch");

            var localVarPath = "/api/trivia/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (k != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "k", k)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriviaSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderboardModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LeaderboardModel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderboardModel>)));
        }

        /// <summary>
        /// Search Trivia contest participants 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="k">Keyword to find in Name property</param>
        /// <returns>Task of List&lt;LeaderboardModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LeaderboardModel>> TriviaSearchAsync (string k)
        {
             ApiResponse<List<LeaderboardModel>> localVarResponse = await TriviaSearchAsyncWithHttpInfo(k);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Trivia contest participants 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="k">Keyword to find in Name property</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderboardModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LeaderboardModel>>> TriviaSearchAsyncWithHttpInfo (string k)
        {
            // verify the required parameter 'k' is set
            if (k == null)
                throw new ApiException(400, "Missing required parameter 'k' when calling TriviaApi->TriviaSearch");

            var localVarPath = "/api/trivia/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (k != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "k", k)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriviaSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderboardModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LeaderboardModel>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderboardModel>)));
        }

        /// <summary>
        /// Submit Answer Submit answer to trivia question
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">Trivia answer and supporting data</param>
        /// <returns>AnswerResponseModel</returns>
        public AnswerResponseModel TriviaSubmitAnswer (AnswerModel answer)
        {
             ApiResponse<AnswerResponseModel> localVarResponse = TriviaSubmitAnswerWithHttpInfo(answer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Answer Submit answer to trivia question
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">Trivia answer and supporting data</param>
        /// <returns>ApiResponse of AnswerResponseModel</returns>
        public ApiResponse< AnswerResponseModel > TriviaSubmitAnswerWithHttpInfo (AnswerModel answer)
        {
            // verify the required parameter 'answer' is set
            if (answer == null)
                throw new ApiException(400, "Missing required parameter 'answer' when calling TriviaApi->TriviaSubmitAnswer");

            var localVarPath = "/api/trivia/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answer != null && answer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(answer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answer; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriviaSubmitAnswer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerResponseModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerResponseModel)));
        }

        /// <summary>
        /// Submit Answer Submit answer to trivia question
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">Trivia answer and supporting data</param>
        /// <returns>Task of AnswerResponseModel</returns>
        public async System.Threading.Tasks.Task<AnswerResponseModel> TriviaSubmitAnswerAsync (AnswerModel answer)
        {
             ApiResponse<AnswerResponseModel> localVarResponse = await TriviaSubmitAnswerAsyncWithHttpInfo(answer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit Answer Submit answer to trivia question
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">Trivia answer and supporting data</param>
        /// <returns>Task of ApiResponse (AnswerResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnswerResponseModel>> TriviaSubmitAnswerAsyncWithHttpInfo (AnswerModel answer)
        {
            // verify the required parameter 'answer' is set
            if (answer == null)
                throw new ApiException(400, "Missing required parameter 'answer' when calling TriviaApi->TriviaSubmitAnswer");

            var localVarPath = "/api/trivia/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answer != null && answer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(answer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answer; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriviaSubmitAnswer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerResponseModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerResponseModel)));
        }

    }
}
